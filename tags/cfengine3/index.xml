<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cfengine3 on </title>
    <link>https://cmdln.org/tags/cfengine3/</link>
    <description>Recent content in cfengine3 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cmdln.org/tags/cfengine3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom services in CFEngine 3</title>
      <link>https://cmdln.org/2019/05/31/custom-services-in-cfengine-3/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2019/05/31/custom-services-in-cfengine-3/</guid>
      <description>CFEngine provides the services promise type to manage the state of a given service. By default, bundle agent standard_services is used for the service_method. The standard_services bundle uses the status command and interprets the return codes according to the Linux Standards Base init script actions. Unfortunately some init scripts do not follow the standards. If the status command returns zero when a service is not running, cfengine will issue the commands necessary to stop the service every time the agent is run.</description>
    </item>
    
    <item>
      <title>Clearing POSIX ACLs from a file with CFEngine</title>
      <link>https://cmdln.org/2019/03/18/clearing-posix-acls-from-a-file-with-cfengine/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2019/03/18/clearing-posix-acls-from-a-file-with-cfengine/</guid>
      <description>From #cfengine on irc.freenode.net:
  How can I clear the POSIX ACLs from a file?  To clear the POSIX ACLs from a file, you specify the ACL with no permissions.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  bundle agent main { vars: &amp;#34;file&amp;#34; string =&amp;gt; &amp;#34;/tmp/myFileWithAces&amp;#34;; files: &amp;#34;$(file)&amp;#34; create =&amp;gt; &amp;#34;true&amp;#34;; methods: &amp;#34;Set POSIX ACL and report&amp;#34; usebundle =&amp;gt; SetAndReport( $(file) ); &amp;#34;UnSet POSIX ACL and report&amp;#34; usebundle =&amp;gt; UnSetAndReport( $(file) ); } bundle agent SetAndReport( file ) { files: &amp;#34;$(file)&amp;#34; acl =&amp;gt; my_posix_aces; reports: &amp;#34;In $(this.</description>
    </item>
    
    <item>
      <title>Executing commands with substitution from CFEngine</title>
      <link>https://cmdln.org/2019/03/08/executing-commands-with-substitution-from-cfengine/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2019/03/08/executing-commands-with-substitution-from-cfengine/</guid>
      <description>How can I execute a command that uses command substitution in CFEngine?  On the console I might execute something like this:
1 2  touch /tmp/file-$(date --iso-8601) ls /tmp/file-*  /tmp/file-2019-03-08  I recommend not executing commands using substitution. Instead, prepare all that you need up front. Get the result of the data command and put it into a cfengine variable, then use the cfengine variable directly.</description>
    </item>
    
    <item>
      <title>Ensure all files in roots PATH are only writeable by root</title>
      <link>https://cmdln.org/2018/11/21/ensure-all-files-in-roots-path-are-only-writeable-by-root/</link>
      <pubDate>Wed, 21 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/11/21/ensure-all-files-in-roots-path-are-only-writeable-by-root/</guid>
      <description>How can I ensure that only root has write access to the files and directories  (including symbolic links) in its $PATH?  We could get roots path and then promise that each path recursively has files that are owned by root and that those files are only writeable by root, not writeable by group and not writeable by others. In this example warning vs fixed is implemented for easy switching by the value of a variable.</description>
    </item>
    
    <item>
      <title>The -top- mustache extension in CFEngine 3</title>
      <link>https://cmdln.org/2018/11/16/the-top-mustache-extension-in-cfengine-3/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/11/16/the-top-mustache-extension-in-cfengine-3/</guid>
      <description>What is the -top- extension, and how do I use it in CFEngines Mustache templating method?  The -top- extension to the mustache template method, first introduced in CFEngine 3.9.0, is a special key representing the complete data given to the templating engine. This is useful for iterating over the top level of a container {{#-top-}} ... {{/-top-}} and rendering json representation of data given with $ and %.</description>
    </item>
    
    <item>
      <title>Hacking custom variables for additional augments in CFEngine</title>
      <link>https://cmdln.org/2018/11/13/hacking-custom-variables-for-additional-augments-in-cfengine/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/11/13/hacking-custom-variables-for-additional-augments-in-cfengine/</guid>
      <description>CFEngine 3.12.0 introduced the augments key to the Augments file format. If you are not already familiar with Augments, check it out. It&#39;s a very easy way to define classes and variables very early during agent execution, before policy.
The new augments key allows you to merge additional data in the augments format on top of the base augments. I However, there is, I think, still a simple way to accomplish this.</description>
    </item>
    
    <item>
      <title>Looking at three high level patterns in CFEngine 3</title>
      <link>https://cmdln.org/2018/11/10/looking-at-three-high-level-patterns-in-cfengine-3/</link>
      <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/11/10/looking-at-three-high-level-patterns-in-cfengine-3/</guid>
      <description>How do you deal with config files that need different settings based on various services that are running on a host and cooperate with other teams? It&#39;s a common question, and it came up on in #cfengine on irc.freenode.net recently.
  The issue is that team A might be working on package A, which requires some  environment variables set. But team B might be working on a totally different  thing -- and want to achieve the same thing.</description>
    </item>
    
    <item>
      <title>Automatically define classes for every promise with CFEngine 3</title>
      <link>https://cmdln.org/2018/10/22/automatically-define-classes-for-every-promise-with-cfengine-3/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/10/22/automatically-define-classes-for-every-promise-with-cfengine-3/</guid>
      <description>In CFEngine classes are used for decision making. Classes can be defined as the result of a promise by attaching a classes body to the promise via the /classes/ attribute.
For example, here we run the command echo Hello World and define bundle scoped classes using the results classes body prefixed with Hello_World.
1 2 3 4 5 6 7 8 9 10  bundle agent main { commands: &amp;#34;echo Hello World&amp;#34; contain =&amp;gt; in_shell, classes =&amp;gt; results( &amp;#34;bundle&amp;#34;, &amp;#34;Hello_World&amp;#34; ); reports: &amp;#34;Defined Classes: $(with)&amp;#34; with =&amp;gt; join( &amp;#34;, &amp;#34;, classesmatching( &amp;#34;Hello_.</description>
    </item>
    
    <item>
      <title>Using classes from datastate() with explicit template_data for rendering mustache in cfengine 3</title>
      <link>https://cmdln.org/2018/10/19/using-classes-from-datastate-with-explicit-template_data-for-rendering-mustache-in-cfengine-3/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/10/19/using-classes-from-datastate-with-explicit-template_data-for-rendering-mustache-in-cfengine-3/</guid>
      <description>This was asked on the CFEngine Help Mailing list on October 1st 2018.
  How can I use classes in a mustache template while passing explicit data to template_data?  When a mustache template is rendered without providing explicit data to the template_data attribute in a files promise datastate() is used. datastate() contains the JSON representation of the current cfengine state.
When providing explicit data the variables and classes from the current state are not included.</description>
    </item>
    
    <item>
      <title>Setting the timeout with url_get() in cfengine 3</title>
      <link>https://cmdln.org/2018/10/18/setting-the-timeout-with-url_get-in-cfengine-3/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/10/18/setting-the-timeout-with-url_get-in-cfengine-3/</guid>
      <description>How do I set the timeout with url_get()?  As shown in the documentation for url_get(), you set url.timeout in the data container passed for url_get() options.
This example policy shows how to configure the timeout and demonstrates it by making a request through www.delay.me.
1 2 3 4 5 6 7 8 9 10 11 12 13 14  bundle agent main { vars: &amp;#34;options&amp;#34; data =&amp;gt; &amp;#39;{ &amp;#34;url.</description>
    </item>
    
    <item>
      <title>Disabling desktop search (trackerd) with cfengine 3</title>
      <link>https://cmdln.org/2018/08/08/disabling-desktop-search-trackerd-with-cfengine-3/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/08/08/disabling-desktop-search-trackerd-with-cfengine-3/</guid>
      <description>Recently I noticed that my CPU was pretty busy with the desktop search indexing, it brought me to the question:
  How can I disable the desktop search service trackerd?  After a brief investigation I found some XDG desktop needed to be edited to include the key Hidden=true.
This policy disables known trackerd related XDG files when they are found.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  body file control { inputs =&amp;gt; { &amp;#34;$(sys.</description>
    </item>
    
    <item>
      <title>Augments driven access promises with cfengine 3</title>
      <link>https://cmdln.org/2018/07/19/augments-driven-access-promises-with-cfengine-3/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/07/19/augments-driven-access-promises-with-cfengine-3/</guid>
      <description>How can I define custom access promises for cf-serverd without modifying  vendored policy?  Commonly, when custom access promises are introduced, they are introduced by editing bundle server access_rules in controls/cf_serverd.cf where the default access rules are promised. Modifying policy maintained upstream can complicate future framework upgrades because care must be taken to ensure that modifications are preserved. There is no need to edit the vendored policy file to define custom access promises.</description>
    </item>
    
    <item>
      <title>vars can&#39;t use ifelapsed</title>
      <link>https://cmdln.org/2017/12/26/vars-cant-use-ifelapsed/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2017/12/26/vars-cant-use-ifelapsed/</guid>
      <description>Why doesn&#39;t body action if_elapsed work with vars type promises?  Let&#39;s start with the details of body action if_elapsed.
1 2 3 4 5 6 7  body action if_elapsed(x) # @brief Evaluate the promise every `x` minutes  # @param x The time in minutes between promise evaluations  { ifelapsed =&amp;gt; &amp;#34;$(x)&amp;#34;; expireafter =&amp;gt; &amp;#34;$(x)&amp;#34;; }   The ifelapsed action body attribute is the number of minutes before next allowed assessment of a promise.</description>
    </item>
    
    <item>
      <title>Easiest way to make standalone examples in CFEngine 3</title>
      <link>https://cmdln.org/2017/11/30/easiest-way-to-make-standalone-examples-in-cfengine-3/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2017/11/30/easiest-way-to-make-standalone-examples-in-cfengine-3/</guid>
      <description>What&#39;s the simplest, easiest, no-fuss way to wrap up standalone example?  I use ob-cfengine3 with org-mode inside of spacemacs for most of my self contained examples and when I start prototyping new policy.
When I have a cfengine3 SRC block and I execute it body file control is magically inserted to load the stdlib.
1 2 3 4 5 6 7  bundle agent main { reports: &amp;#34;$(this.</description>
    </item>
    
  </channel>
</rss>