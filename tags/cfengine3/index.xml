<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cfengine3 on </title>
    <link>https://cmdln.org/tags/cfengine3/</link>
    <description>Recent content in Cfengine3 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 18 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cmdln.org/tags/cfengine3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting the timeout with url_get() in cfengine 3 </title>
      <link>https://cmdln.org/2018/10/18/setting-the-timeout-with-url_get-in-cfengine-3/</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/10/18/setting-the-timeout-with-url_get-in-cfengine-3/</guid>
      <description>How do I set the timeout with url_get()?  You set url.timeout in the data container passed for url_get() options.
This example policy shows how to configure the timeout and demonstrates it by making a request through www.delay.me.
1 2 3 4 5 6 7 8 9 10 11 12 13 14  bundle agent main { vars: &amp;#34;options&amp;#34; data =&amp;gt; &amp;#39;{ &amp;#34;url.timeout&amp;#34;: &amp;#34;30&amp;#34;, &amp;#34;url.verbose&amp;#34;: &amp;#34;1&amp;#34; }&amp;#39;; &amp;#34;response&amp;#34; data =&amp;gt; url_get( &amp;#34;http://www.</description>
    </item>
    
    <item>
      <title>Disabling desktop search (trackerd) with cfengine 3</title>
      <link>https://cmdln.org/2018/08/08/disabling-desktop-search-trackerd-with-cfengine-3/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/08/08/disabling-desktop-search-trackerd-with-cfengine-3/</guid>
      <description>Recently I noticed that my CPU was pretty busy with the desktop search indexing, it brought me to the question:
  How can I disable the desktop search service trackerd?  After a brief investigation I found some XDG desktop needed to be edited to include the key Hidden=true.
This policy disables known trackerd related XDG files when they are found.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  body file control { inputs =&amp;gt; { &amp;#34;$(sys.</description>
    </item>
    
    <item>
      <title>Augments driven access promises with cfengine 3</title>
      <link>https://cmdln.org/2018/07/19/augments-driven-access-promises-with-cfengine-3/</link>
      <pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2018/07/19/augments-driven-access-promises-with-cfengine-3/</guid>
      <description>How can I define custom access promises for cf-serverd without modifying  vendored policy?  Commonly, when custom access promises are introduced, they are introduced by editing bundle server access_rules in controls/cf_serverd.cf where the default access rules are promised. Modifying policy maintained upstream can complicate future framework upgrades because care must be taken to ensure that modifications are preserved. There is no need to edit the vendored policy file to define custom access promises.</description>
    </item>
    
    <item>
      <title>vars can&#39;t use ifelapsed</title>
      <link>https://cmdln.org/2017/12/26/vars-cant-use-ifelapsed/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2017/12/26/vars-cant-use-ifelapsed/</guid>
      <description>Why doesn&#39;t body action if_elapsed work with vars type promises?  Let&#39;s start with the details of body action if_elapsed.
1 2 3 4 5 6 7  body action if_elapsed(x) # @brief Evaluate the promise every `x` minutes  # @param x The time in minutes between promise evaluations  { ifelapsed =&amp;gt; &amp;#34;$(x)&amp;#34;; expireafter =&amp;gt; &amp;#34;$(x)&amp;#34;; }   The ifelapsed action body attribute is the number of minutes before next allowed assessment of a promise.</description>
    </item>
    
    <item>
      <title>Easiest way to make standalone examples in CFEngine 3</title>
      <link>https://cmdln.org/2017/11/30/easiest-way-to-make-standalone-examples-in-cfengine-3/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cmdln.org/2017/11/30/easiest-way-to-make-standalone-examples-in-cfengine-3/</guid>
      <description>What&#39;s the simplest, easiest, no-fuss way to wrap up standalone example?  I use ob-cfengine3 with org-mode inside of spacemacs for most of my self contained examples and when I start prototyping new policy.
When I have a cfengine3 SRC block and I execute it body file control is magically inserted to load the stdlib.
1 2 3 4 5 6 7  bundle agent main { reports: &amp;#34;$(this.</description>
    </item>
    
  </channel>
</rss>